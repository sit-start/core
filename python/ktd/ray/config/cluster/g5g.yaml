cluster_name: g5g
max_workers: 4
upscaling_speed: 1.0
idle_timeout_minutes: 10
provider:
  type: aws
  region: us-west-2
  availability_zone: us-west-2a,us-west-2b,us-west-2c
auth:
  ssh_user: ec2-user
  ssh_private_key: ~/.ssh/rsa.pem
available_node_types:
  ray.head.default:
    max_workers: 0
    resources: {}
    node_config:
      InstanceType: m6g.xlarge
      ImageId: ami-071bc49379107ae95
      KeyName: rsa
      IamInstanceProfile:
        Arn: arn:aws:iam::960487471244:instance-profile/ray-head
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 256
            VolumeType: gp3
  ray.worker.default:
    min_workers: 0
    max_workers: 4
    resources: {}
    node_config:
      InstanceType: g5g.2xlarge
      ImageId: ami-071bc49379107ae95
      KeyName: rsa
      IamInstanceProfile:
        Arn: arn:aws:iam::960487471244:instance-profile/ray-worker
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 256
            VolumeType: gp3
head_node_type: ray.head.default
file_mounts: {}
cluster_synced_files:
  - "~ec2-user/dev"
  - "~ec2-user/.bash_profile"
  - "~ec2-user/.bashrc"
file_mounts_sync_continuously: True
rsync_exclude:
  - "**/.git"
  - "**/.git/**"
rsync_filter:
  - ".gitignore"
initialization_commands: []
setup_commands:
  - |
    # fetch repo deploy keys
    repos=(dev core notebooks dotfiles)
    for repo in "${repos[@]}"; do
      key_name="${repo}_deploy_ed25519"
      test -f ~/.ssh/"$key_name" ||
        (aws secretsmanager get-secret-value --secret-id "$key_name" \
          --query SecretString --output text |
          jq --raw-output .private >~/.ssh/"$key_name" &&
          chmod go-rwx ~/.ssh/"$key_name")
    done
  - |
    # add github keys to known hosts
    github_keys=$(curl -s https://api.github.com/meta | jq -r .ssh_keys[])
    grep -xqF "$github_keys" ~/.ssh/known_hosts 2>/dev/null ||
      while IFS= read -r key; do
        echo "github.com $key" >>~/.ssh/known_hosts
      done <<<"$github_keys"
  - |
    # clone and sync dotfiles
    yadm rev-parse --is-inside-work-tree >/dev/null 2>&1 &&
      GIT_SSH_COMMAND="ssh -i ~/.ssh/dotfiles_deploy_ed25519" \
        yadm pull ||
      GIT_SSH_COMMAND="ssh -i ~/.ssh/dotfiles_deploy_ed25519" \
        yadm clone git@github.com:kevdale/dotfiles --no-checkout &&
      yadm checkout ~
  # login and configure wandb
  - wandb login
  - source ~/.bash_profile && mkdir -p $WANDB_DIR
head_setup_commands:
  # clone the dev repo; requires `deploy_dev` function from the dotfiles yadm
  # clone above and deploy keys for dev and its submodules
  - deploy_repo dev
  # create the prometheus service file
  - |
    sudo cp "$DEV/core/python/ktd/ray/config/aux/prometheus.service" \
      /etc/systemd/system/prometheus.service
  # update the fluent-bit config after deploying dev
  - |
    sudo mkdir -p /etc/fluent-bit &&
      sudo cp "$DEV/core/python/ktd/ray/config/aux/fluent-bit.conf" \
        /etc/fluent-bit/fluent-bit.conf
  # update the grafana service file to ensure grafana can acccess Ray
  # config files in /tmp/ray
  - |
    sudo sed -i \
      's/^PrivateTmp=true/PrivateTmp=false # need to access \/tmp\/ray\//g' \
      /usr/lib/systemd/system/grafana-server.service
worker_setup_commands:
  # update the fluent-bit config; requires $DEV/core to be populated
  - |
    sudo cp "$DEV/core/python/ktd/ray/config/aux/fluent-bit.conf" \
      /etc/fluent-bit/fluent-bit.conf
head_start_ray_commands:
  # restart ray
  - ray stop
  - |
    ray start --head --port=6379 --object-manager-port=8076 \
      --autoscaling-config=~/ray_bootstrap_config.yaml \
      --dashboard-host=0.0.0.0
  # update the grafana service config; requires that ray has started;
  # note that replacing CONF_FILE in /etc/sysconfig/grafana-server
  # doesn't work without additional changes to the grafana service file, e.g.,
  # specifiying `--homepath=${GRAFANA_HOME}` in the `ExecStart` line,
  # so we opt the for the simpler approach of replacing the service config
  - |
    sudo test -f /etc/grafana/grafana.ini.ray-bak || (
      sudo cp /etc/grafana/grafana.ini /etc/grafana/grafana.ini.ray-bak &&
        sudo cp /tmp/ray/session_latest/metrics/grafana/grafana.ini \
          /etc/grafana/grafana.ini)
  # start services
  - sudo systemctl start grafana-server
  - sudo systemctl start prometheus
  - sudo systemctl start fluent-bit
worker_start_ray_commands:
  # restart ray
  - ray stop
  - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
  # start the fluent-bit service
  - sudo systemctl start fluent-bit
